{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\"; // axios import 추가\n\nexport default {\n  name: \"SignupView\",\n  data() {\n    return {\n      email: \"\",\n      verificationCode: \"\",\n      password: \"\",\n      passwordConfirm: \"\",\n      passwordVisible: false,\n      passwordConfirmVisible: false,\n      name: \"\",\n      nickname: \"\",\n      birthdate: \"\",\n      gender: \"\",\n      selectedGenre1: \"\",\n      selectedGenre2: \"\",\n      selectedGenre3: \"\",\n      allGenres: [\"도서관, 서지학\", \"문헌정보학\", \"백과사전\", \"강연집, 수필집, 연설문집\", \"일반 연속간행물\", \"일반학회, 단체, 협회, 기관\", \"신문, 언론, 저널리즘\", \"일반전집, 총서\", \"향토자료\"],\n      emailErrorMessage: \"\",\n      verificationErrorMessage: \"\",\n      isVerificationCodeSent: false\n    };\n  },\n  methods: {\n    goBack() {\n      this.$router.push(\"/login\");\n    },\n    async checkEmailDuplicate() {\n      try {\n        const response = await axios.post(\"/api/user/register\", {\n          email: this.email\n        });\n        if (response.data.isDuplicate) {\n          this.emailErrorMessage = \"이미 사용된 이메일입니다.\";\n        } else {\n          this.emailErrorMessage = \"\";\n        }\n      } catch (error) {\n        console.error(\"이메일 중복 확인 오류:\", error);\n      }\n    },\n    async sendVerificationCode() {\n      if (!this.email) {\n        alert(\"이메일을 입력해주세요.\");\n        return;\n      }\n      try {\n        const response = await axios.post(\"/api/user/register\", {\n          email: this.email\n        });\n        if (response.data.success) {\n          alert(\"인증번호가 이메일로 전송되었습니다.\");\n          this.isVerificationCodeSent = true;\n        } else {\n          alert(\"인증번호 전송에 실패했습니다.\");\n        }\n      } catch (error) {\n        console.error(\"인증번호 전송 오류:\", error);\n      }\n    },\n    async verifyCode() {\n      if (!this.verificationCode) {\n        alert(\"인증번호를 입력해주세요.\");\n        return;\n      }\n      try {\n        const response = await axios.post(\"/api/user/register\", {\n          email: this.email,\n          verificationCode: this.verificationCode\n        });\n        if (response.data.isValid) {\n          this.verificationErrorMessage = \"\";\n          alert(\"인증 성공\");\n        } else {\n          this.verificationErrorMessage = \"인증번호가 올바르지 않습니다.\";\n        }\n      } catch (error) {\n        console.error(\"인증번호 확인 오류:\", error);\n      }\n    },\n    async handleSignup() {\n      if (this.password !== this.passwordConfirm) {\n        alert(\"비밀번호가 일치하지 않습니다.\");\n        return;\n      }\n      const signupData = {\n        email: this.email,\n        password: this.password,\n        name: this.name,\n        nickname: this.nickname,\n        birthdate: this.birthdate,\n        gender: this.gender,\n        genres: [this.selectedGenre1, this.selectedGenre2, this.selectedGenre3]\n      };\n      console.log(\"회원가입 데이터:\", signupData);\n      try {\n        const response = await axios.post(\"/api/user/register\", signupData);\n        if (response.data.success) {\n          alert(\"회원가입 성공!\");\n        } else {\n          alert(\"회원가입 실패.\");\n        }\n      } catch (error) {\n        console.error(\"회원가입 오류:\", error);\n      }\n    },\n    togglePasswordVisibility(field) {\n      if (field === \"password\") {\n        this.passwordVisible = !this.passwordVisible;\n      } else if (field === \"passwordConfirm\") {\n        this.passwordConfirmVisible = !this.passwordConfirmVisible;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","email","verificationCode","password","passwordConfirm","passwordVisible","passwordConfirmVisible","nickname","birthdate","gender","selectedGenre1","selectedGenre2","selectedGenre3","allGenres","emailErrorMessage","verificationErrorMessage","isVerificationCodeSent","methods","goBack","$router","push","checkEmailDuplicate","response","post","isDuplicate","error","console","sendVerificationCode","alert","success","verifyCode","isValid","handleSignup","signupData","genres","log","togglePasswordVisibility","field"],"sources":["C:\\Users\\sec\\Desktop\\Vue\\proj\\FE-MyBookShelf\\src\\views\\SignupView.vue"],"sourcesContent":["<template>\r\n  <div class=\"form-container\">\r\n    <button @click=\"goBack\" class=\"back-button\">◁</button>\r\n\r\n    <h2>회원가입</h2>\r\n\r\n    <form @submit.prevent=\"handleSignup\">\r\n      <!-- 이메일 -->\r\n      <div class=\"form-group\">\r\n        <label for=\"email\">이메일</label>\r\n        <div class=\"email-input-wrapper\">\r\n          <input \r\n            type=\"email\" \r\n            id=\"email\" \r\n            v-model=\"email\" \r\n            placeholder=\"이메일 입력\" \r\n            required \r\n          />\r\n          <button type=\"button\" @click=\"checkEmailDuplicate\">중복 확인</button>\r\n        </div>\r\n        <span v-if=\"emailErrorMessage\" style=\"color: red;\">{{ emailErrorMessage }}</span>\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"verificationCode\">인증번호</label>\r\n        <div class=\"email-input-wrapper\">\r\n          <input \r\n            type=\"text\" \r\n            id=\"verificationCode\" \r\n            v-model=\"verificationCode\" \r\n            placeholder=\"인증번호 입력\" \r\n            required \r\n          />\r\n          <button type=\"button\" @click=\"sendVerificationCode\">인증번호 받기</button>\r\n          <button type=\"button\" @click=\"verifyCode\">인증하기</button>\r\n        </div>\r\n        <span v-if=\"verificationErrorMessage\" style=\"color: red;\">{{ verificationErrorMessage }}</span>\r\n      </div>\r\n\r\n      <!-- 비밀번호 -->\r\n      <div class=\"form-group\">\r\n        <label for=\"password\">비밀번호</label>\r\n        <div class=\"password-input-wrapper\">\r\n          <input\r\n            :type=\"passwordVisible ? 'text' : 'password'\"\r\n            id=\"password\"\r\n            v-model=\"password\"\r\n            placeholder=\"비밀번호 입력\"\r\n            required\r\n          />\r\n          <span class=\"toggle-visibility\" @click=\"togglePasswordVisibility('password')\">\r\n            {{ passwordVisible ? '👁️' : '👁️‍🗨️' }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    \r\n      <!-- 비밀번호 확인 -->\r\n      <div class=\"form-group\">\r\n        <label for=\"passwordConfirm\">비밀번호 확인</label>\r\n        <div class=\"password-input-wrapper\">\r\n          <input\r\n            :type=\"passwordConfirmVisible ? 'text' : 'password'\"\r\n            id=\"passwordConfirm\"\r\n            v-model=\"passwordConfirm\"\r\n            placeholder=\"비밀번호 확인 입력\"\r\n            required\r\n          />\r\n          <span class=\"toggle-visibility\" @click=\"togglePasswordVisibility('passwordConfirm')\">\r\n            {{ passwordConfirmVisible ? '👁️' : '👁️‍🗨️' }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 이름 -->\r\n      <div class=\"form-group\">\r\n        <label for=\"name\">이름</label>\r\n        <input type=\"text\" id=\"name\" v-model=\"name\" placeholder=\"이름 입력\" required />\r\n      </div>\r\n\r\n      <!-- 닉네임 -->\r\n      <div class=\"form-group\">\r\n        <label for=\"nickname\">닉네임</label>\r\n        <input type=\"text\" id=\"nickname\" v-model=\"nickname\" placeholder=\"닉네임 입력\" required />\r\n      </div>\r\n\r\n      <!-- 생년월일 -->\r\n      <div class=\"form-group\">\r\n        <label for=\"birthdate\">생년월일</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"birthdate\"\r\n          v-model=\"birthdate\"\r\n          placeholder=\"YYYY-MM-DD\"\r\n          pattern=\"\\d{4}-\\d{2}-\\d{2}\"\r\n          required\r\n        />\r\n      </div>\r\n\r\n      <!-- 성별 -->\r\n      <div class=\"form-group\">\r\n        <label>성별</label>\r\n        <div class=\"gender\">\r\n          <label>\r\n            <input type=\"radio\" value=\"남\" v-model=\"gender\" required /> 남\r\n          </label>\r\n          <label>\r\n            <input type=\"radio\" value=\"여\" v-model=\"gender\" required /> 여\r\n          </label>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 선호 장르 -->\r\n      <div class=\"form-group\">\r\n        <label>선호 장르</label>\r\n        <div class=\"genre-select\">\r\n          <label for=\"genre1\">[장르 1]</label>\r\n          <select v-model=\"selectedGenre1\" id=\"genre1\" required>\r\n            <option value=\"\" disabled selected>선택</option>\r\n            <option v-for=\"genre in allGenres\" :key=\"genre\" :value=\"genre\">{{ genre }}</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"genre-select\">\r\n          <label for=\"genre2\">[장르 2]</label>\r\n          <select v-model=\"selectedGenre2\" id=\"genre2\">\r\n            <option value=\"\" disabled selected>선택</option>\r\n            <option v-for=\"genre in allGenres\" :key=\"genre\" :value=\"genre\">{{ genre }}</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"genre-select\">\r\n          <label for=\"genre3\">[장르 3]</label>\r\n          <select v-model=\"selectedGenre3\" id=\"genre3\">\r\n            <option value=\"\" disabled selected>선택</option>\r\n            <option v-for=\"genre in allGenres\" :key=\"genre\" :value=\"genre\">{{ genre }}</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      <button type=\"submit\" class=\"signup-button\">회원가입하기</button>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\"; // axios import 추가\r\n\r\nexport default {\r\n  name: \"SignupView\",\r\n  data() {\r\n    return {\r\n      email: \"\",\r\n      verificationCode: \"\",\r\n      password: \"\",\r\n      passwordConfirm: \"\",\r\n      passwordVisible: false,\r\n      passwordConfirmVisible: false,\r\n      name: \"\",\r\n      nickname: \"\",\r\n      birthdate: \"\",\r\n      gender: \"\",\r\n      selectedGenre1: \"\",\r\n      selectedGenre2: \"\",\r\n      selectedGenre3: \"\",\r\n      allGenres: [\r\n        \"도서관, 서지학\", \"문헌정보학\", \"백과사전\", \"강연집, 수필집, 연설문집\",\r\n        \"일반 연속간행물\", \"일반학회, 단체, 협회, 기관\", \"신문, 언론, 저널리즘\", \"일반전집, 총서\", \"향토자료\",\r\n      ],\r\n      emailErrorMessage: \"\",\r\n      verificationErrorMessage: \"\",\r\n      isVerificationCodeSent: false,\r\n    };\r\n  },\r\n  methods: {\r\n    goBack() {\r\n      this.$router.push(\"/login\");\r\n    },\r\n    \r\n    async checkEmailDuplicate() {\r\n      try {\r\n        const response = await axios.post(\"/api/user/register\", { email: this.email });\r\n        if (response.data.isDuplicate) {\r\n          this.emailErrorMessage = \"이미 사용된 이메일입니다.\";\r\n        } else {\r\n          this.emailErrorMessage = \"\";\r\n        }\r\n      } catch (error) {\r\n        console.error(\"이메일 중복 확인 오류:\", error);\r\n      }\r\n    },\r\n\r\n    async sendVerificationCode() {\r\n      if (!this.email) {\r\n        alert(\"이메일을 입력해주세요.\");\r\n        return;\r\n      }\r\n      try {\r\n        const response = await axios.post(\"/api/user/register\", { email: this.email });\r\n        if (response.data.success) {\r\n          alert(\"인증번호가 이메일로 전송되었습니다.\");\r\n          this.isVerificationCodeSent = true;\r\n        } else {\r\n          alert(\"인증번호 전송에 실패했습니다.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"인증번호 전송 오류:\", error);\r\n      }\r\n    },\r\n\r\n    async verifyCode() {\r\n      if (!this.verificationCode) {\r\n        alert(\"인증번호를 입력해주세요.\");\r\n        return;\r\n      }\r\n      try {\r\n        const response = await axios.post(\"/api/user/register\", {\r\n          email: this.email,\r\n          verificationCode: this.verificationCode,\r\n        });\r\n        if (response.data.isValid) {\r\n          this.verificationErrorMessage = \"\";\r\n          alert(\"인증 성공\");\r\n        } else {\r\n          this.verificationErrorMessage = \"인증번호가 올바르지 않습니다.\";\r\n        }\r\n      } catch (error) {\r\n        console.error(\"인증번호 확인 오류:\", error);\r\n      }\r\n    },\r\n\r\n    async handleSignup() {\r\n      if (this.password !== this.passwordConfirm) {\r\n        alert(\"비밀번호가 일치하지 않습니다.\");\r\n        return;\r\n      }\r\n      const signupData = {\r\n        email: this.email,\r\n        password: this.password,\r\n        name: this.name,\r\n        nickname: this.nickname,\r\n        birthdate: this.birthdate,\r\n        gender: this.gender,\r\n        genres: [this.selectedGenre1, this.selectedGenre2, this.selectedGenre3],\r\n      };\r\n      console.log(\"회원가입 데이터:\", signupData);\r\n      try {\r\n        const response = await axios.post(\"/api/user/register\", signupData);\r\n        if (response.data.success) {\r\n          alert(\"회원가입 성공!\");\r\n        } else {\r\n          alert(\"회원가입 실패.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"회원가입 오류:\", error);\r\n      }\r\n    },\r\n\r\n    togglePasswordVisibility(field) {\r\n      if (field === \"password\") {\r\n        this.passwordVisible = !this.passwordVisible;\r\n      } else if (field === \"passwordConfirm\") {\r\n        this.passwordConfirmVisible = !this.passwordConfirmVisible;\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n  \r\n<style scoped>\r\n.form-container {\r\n  max-width: 400px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 20px;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  font-weight: bold;\r\n}\r\n\r\n.email-input-wrapper {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px; /* 입력란과 버튼 사이의 간격 */\r\n}\r\n\r\n.email-input-wrapper input {\r\n  flex: 1; /* 입력란이 가로로 확장되도록 설정 */\r\n}\r\n\r\n.email-input-wrapper button {\r\n  padding: 8px 12px;\r\n  font-size: 14px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  background-color: #28a745;\r\n  color: #fff;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.email-input-wrapper button:hover {\r\n  background-color: #218838;\r\n}\r\n\r\n/* 비밀번호 스타일 추가 */\r\n.password-input-wrapper {\r\n  display: flex;\r\n  align-items: center;\r\n  position: relative;\r\n}\r\n\r\n.password-input-wrapper input {\r\n  flex: 1;\r\n}\r\n\r\n.toggle-visibility {\r\n  cursor: pointer;\r\n  padding: 0 10px;\r\n  font-size: 18px;\r\n  color: #666;\r\n  user-select: none;\r\n}\r\n\r\ninput,\r\nselect {\r\n  width: 100%;\r\n  padding: 10px;\r\n  font-size: 14px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  box-sizing: border-box;\r\n}\r\n\r\n/* 성별 체크박스 */\r\n.gender {\r\n  display: flex;\r\n  justify-content: space-around;\r\n}\r\n\r\n.gender label {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 7px; /* 텍스트와 체크박스 간격 */\r\n}\r\n\r\n.signup-button {\r\n  width: 100%;\r\n  padding: 8px; /* 버튼 크기 줄이기 */\r\n  font-size: 14px; /* 폰트 크기 줄이기 */\r\n  color: #fff;\r\n  background: #28a745;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.signup-button:hover {\r\n  background: #218838;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}