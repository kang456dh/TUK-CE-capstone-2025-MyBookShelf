{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\"; // axios import 추가\n\naxios.defaults.baseURL = 'http://localhost:8081'; // Spring Boot 서버 주소\n\nexport default {\n  name: \"SignupView\",\n  data() {\n    return {\n      email: \"\",\n      verificationCode: \"\",\n      password: \"\",\n      passwordConfirm: \"\",\n      passwordVisible: false,\n      passwordConfirmVisible: false,\n      realname: \"\",\n      nickname: \"\",\n      birthdate: \"\",\n      gender: \"\",\n      selectedGenre1: \"\",\n      selectedGenre2: \"\",\n      selectedGenre3: \"\",\n      allGenres: [\"판타지\", \"과학 소설\", \"미스터리\"],\n      emailErrorMessage: \"\",\n      verificationErrorMessage: \"\",\n      isVerificationCodeSent: false\n    };\n  },\n  computed: {\n    isPasswordMismatch() {\n      return this.passwordConfirm && this.password !== this.passwordConfirm;\n    }\n  },\n  methods: {\n    goBack() {\n      this.$router.push(\"/login\");\n    },\n    async checkEmailDuplicate() {\n      try {\n        const response = await axios.get(`/api/user/check-email?email=${encodeURIComponent(this.email)}`);\n        if (response.data.success) {\n          this.emailErrorMessage = \"사용 가능한 이메일입니다.\";\n        } else {\n          /* this.emailErrorMessage = response.data.message; // ApiResponse에서 메시지 가져오기 */\n          this.emailErrorMessage = \"중복된 이메일입니다.\";\n        }\n      } catch (error) {\n        console.error(\"이메일 중복 확인 오류:\", error);\n      }\n    },\n    async sendVerificationCode() {\n      if (!this.email) {\n        alert(\"이메일을 입력해주세요.\");\n        return;\n      }\n      try {\n        const response = await axios.post(\"/api/email/send-verification\", {\n          email: this.email\n        });\n        if (response.data.isSuccess) {\n          alert(\"인증번호가 이메일로 전송되었습니다.\");\n          this.isVerificationCodeSent = true;\n        } else {\n          alert(\"인증번호 전송에 실패했습니다.\");\n        }\n      } catch (error) {\n        console.error(\"인증번호 전송 오류:\", error);\n      }\n    },\n    async verifyCode() {\n      if (!this.verificationCode) {\n        alert(\"인증번호를 입력해주세요.\");\n        return;\n      }\n      try {\n        const response = await axios.get(`/api/email/verify-code?inputCode=${this.verificationCode}`);\n        if (response.data.isSuccess) {\n          alert(\"인증번호가 확인되었습니다.\");\n          // 이후 회원가입 진행 또는 다음 단계로 이동\n        } else {\n          alert(\"인증번호 확인에 실패했습니다: \" + response.data.message);\n        }\n      } catch (error) {\n        console.error(\"인증번호 검증 오류:\", error);\n      }\n    },\n    async checkNicknameDuplicate() {\n      try {\n        const response = await axios.get(`/api/user/check-nickname?nickname=${encodeURIComponent(this.nickname)}`);\n        if (response.data.success) {\n          this.nicknameErrorMessage = \"사용 가능한 닉네임입니다.\";\n        } else {\n          this.nicknameErrorMessage = \"중복된 닉네임입니다.\"; // API 메시지 사용\n        }\n      } catch (error) {\n        console.error(\"닉네임 중복 확인 오류:\", error);\n      }\n    },\n    async handleSignup() {\n      // 입력값 유효성 검증\n      if (!this.email) {\n        alert(\"이메일을 입력해주세요.\");\n        return;\n      }\n      if (this.emailErrorMessage !== \"사용 가능한 이메일입니다.\") {\n        alert(\"이메일 중복 확인을 해주세요.\");\n        return;\n      }\n      if (!this.isVerificationCodeSent || !this.verificationCode) {\n        alert(\"인증번호를 입력하고 인증을 완료해주세요.\");\n        return;\n      }\n      if (!this.password || !this.passwordConfirm) {\n        alert(\"비밀번호를 입력해주세요.\");\n        return;\n      }\n      if (this.password !== this.passwordConfirm) {\n        alert(\"비밀번호가 일치하지 않습니다.\");\n        return;\n      }\n      if (!this.realname) {\n        alert(\"이름을 입력해주세요.\");\n        return;\n      }\n      if (!this.nickname) {\n        alert(\"닉네임을 입력해주세요.\");\n        return;\n      }\n      if (this.nicknameErrorMessage !== \"사용 가능한 닉네임입니다.\") {\n        alert(\"닉네임 중복 확인을 해주세요.\");\n        return;\n      }\n      if (!this.birthdate) {\n        alert(\"생년월일을 입력해주세요.\");\n        return;\n      }\n      if (!this.gender) {\n        alert(\"성별을 선택해주세요.\");\n        return;\n      }\n      if (!this.selectedGenre1) {\n        alert(\"최소 한 개의 장르를 선택해주세요.\");\n        return;\n      }\n\n      // 회원가입 요청 데이터\n      const signupData = {\n        email: this.email,\n        password: this.password,\n        passwordConfirm: this.passwordConfirm,\n        realname: this.realname,\n        nickname: this.nickname,\n        birthDate: this.birthdate,\n        gender: this.gender,\n        genre: [this.selectedGenre1, this.selectedGenre2, this.selectedGenre3]\n      };\n      try {\n        const response = await axios.post(\"/api/user/register\", signupData);\n        if (response.data.success) {\n          alert(\"회원가입 성공!\");\n          this.$router.push(\"/login\"); // 성공 시 로그인 페이지로 이동\n        } else {\n          alert(\"회원가입 실패: \" + response.data.message);\n        }\n      } catch (error) {\n        console.error(\"회원가입 오류:\", error.response ? error.response.data : error.message);\n        alert(\"회원가입 오류: \" + (error.response ? error.response.data.message : \"알 수 없는 오류입니다.\"));\n      }\n    },\n    togglePasswordVisibility(field) {\n      if (field === \"password\") {\n        this.passwordVisible = !this.passwordVisible;\n      } else if (field === \"passwordConfirm\") {\n        this.passwordConfirmVisible = !this.passwordConfirmVisible;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","defaults","baseURL","name","data","email","verificationCode","password","passwordConfirm","passwordVisible","passwordConfirmVisible","realname","nickname","birthdate","gender","selectedGenre1","selectedGenre2","selectedGenre3","allGenres","emailErrorMessage","verificationErrorMessage","isVerificationCodeSent","computed","isPasswordMismatch","methods","goBack","$router","push","checkEmailDuplicate","response","get","encodeURIComponent","success","error","console","sendVerificationCode","alert","post","isSuccess","verifyCode","message","checkNicknameDuplicate","nicknameErrorMessage","handleSignup","signupData","birthDate","genre","togglePasswordVisibility","field"],"sources":["C:\\Users\\sec\\Desktop\\Vue\\proj\\FE-MyBookShelf\\src\\views\\SignupView.vue"],"sourcesContent":["<template>\r\n  <div class=\"form-container\">\r\n    <button @click=\"goBack\" class=\"back-button\">◁</button>\r\n\r\n    <h2>회원가입</h2>\r\n\r\n    <form @submit.prevent=\"handleSignup\">\r\n      <!-- 이메일 -->\r\n      <div class=\"form-group\">\r\n        <label for=\"email\">이메일</label>\r\n        <div class=\"email-input-wrapper\">\r\n          <input \r\n            type=\"email\" \r\n            id=\"email\" \r\n            v-model=\"email\" \r\n            placeholder=\"이메일 입력\" \r\n            required \r\n          />\r\n          <button type=\"button\" @click=\"checkEmailDuplicate\">중복 확인</button>\r\n        </div>\r\n        <span v-if=\"emailErrorMessage\" style=\"color: red;\">{{ emailErrorMessage }}</span>\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"verificationCode\">인증번호</label>\r\n        <div class=\"email-input-wrapper\">\r\n          <input \r\n            type=\"text\" \r\n            id=\"verificationCode\" \r\n            v-model=\"verificationCode\" \r\n            placeholder=\"인증번호 입력\" \r\n            required \r\n          />\r\n          <button type=\"button\" @click=\"sendVerificationCode\">인증번호 받기</button>\r\n          <button type=\"button\" @click=\"verifyCode\">인증하기</button>\r\n        </div>\r\n        <span v-if=\"verificationErrorMessage\" style=\"color: red;\">{{ verificationErrorMessage }}</span>\r\n      </div>\r\n\r\n      <!-- 비밀번호 -->\r\n      <div class=\"form-group\">\r\n        <label for=\"password\">비밀번호</label>\r\n        <div class=\"password-input-wrapper\">\r\n          <input\r\n            :type=\"passwordVisible ? 'text' : 'password'\"\r\n            id=\"password\"\r\n            v-model=\"password\"\r\n            placeholder=\"비밀번호 입력\"\r\n            required\r\n          />\r\n          <span class=\"toggle-visibility\" @click=\"togglePasswordVisibility('password')\">\r\n            {{ passwordVisible ? '👁️' : '👁️‍🗨️' }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    \r\n      <!-- 비밀번호 확인 -->\r\n      <div class=\"form-group\">\r\n        <label for=\"passwordConfirm\">비밀번호 확인</label>\r\n        <div class=\"password-input-wrapper\">\r\n          <input\r\n            :type=\"passwordConfirmVisible ? 'text' : 'password'\"\r\n            id=\"passwordConfirm\"\r\n            v-model=\"passwordConfirm\"\r\n            :class=\"{ 'input-error': isPasswordMismatch }\"\r\n            placeholder=\"비밀번호 확인 입력\"\r\n            required\r\n          />\r\n          <span class=\"toggle-visibility\" @click=\"togglePasswordVisibility('passwordConfirm')\">\r\n            {{ passwordConfirmVisible ? '👁️' : '👁️‍🗨️' }}\r\n          </span>\r\n        </div>\r\n        <span v-if=\"isPasswordMismatch\" style=\"color: red;\">비밀번호가 일치하지 않습니다.</span>\r\n      </div>\r\n\r\n\r\n      <!-- 이름 -->\r\n      <div class=\"form-group\">\r\n        <label for=\"realname\">이름</label>\r\n        <input type=\"text\" id=\"realname\" v-model=\"realname\" placeholder=\"이름 입력\" required />\r\n      </div>\r\n\r\n      <!-- 닉네임 -->\r\n      <div class=\"form-group\">\r\n        <label for=\"nickname\">닉네임</label>\r\n        <div class=\"email-input-wrapper\">\r\n          <input type=\"text\" id=\"nickname\" v-model=\"nickname\" placeholder=\"닉네임 입력\" required />\r\n          <button type=\"button\" @click=\"checkNicknameDuplicate\">중복 확인</button>\r\n        </div>\r\n        <span v-if=\"nicknameErrorMessage\" style=\"color: red;\">{{ nicknameErrorMessage }}</span>\r\n      </div>\r\n\r\n      <!-- 생년월일 -->\r\n      <div class=\"form-group\">\r\n        <label for=\"birthdate\">생년월일</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"birthdate\"\r\n          v-model=\"birthdate\"\r\n          placeholder=\"YYYY-MM-DD\"\r\n          pattern=\"\\d{4}-\\d{2}-\\d{2}\"\r\n          required\r\n        />\r\n      </div>\r\n\r\n     <!-- 성별 -->\r\n      <div class=\"form-group\">\r\n        <label>성별</label>\r\n        <div class=\"gender\">\r\n          <label>\r\n            <input type=\"radio\" value=\"MALE\" v-model=\"gender\" required /> 남성\r\n          </label>\r\n          <label>\r\n            <input type=\"radio\" value=\"FEMALE\" v-model=\"gender\" required /> 여성\r\n          </label>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 선호 장르 -->\r\n      <div class=\"form-group\">\r\n        <label>선호 장르</label>\r\n        <div class=\"genre-select\">\r\n          <label for=\"genre1\">[장르 1]</label>\r\n          <select v-model=\"selectedGenre1\" id=\"genre1\" required>\r\n            <option value=\"\" disabled selected>선택</option>\r\n            <option v-for=\"genre in allGenres\" :key=\"genre\" :value=\"genre\">{{ genre }}</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"genre-select\">\r\n          <label for=\"genre2\">[장르 2]</label>\r\n          <select v-model=\"selectedGenre2\" id=\"genre2\">\r\n            <option value=\"\" disabled selected>선택</option>\r\n            <option v-for=\"genre in allGenres\" :key=\"genre\" :value=\"genre\">{{ genre }}</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"genre-select\">\r\n          <label for=\"genre3\">[장르 3]</label>\r\n          <select v-model=\"selectedGenre3\" id=\"genre3\">\r\n            <option value=\"\" disabled selected>선택</option>\r\n            <option v-for=\"genre in allGenres\" :key=\"genre\" :value=\"genre\">{{ genre }}</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <button type=\"submit\" class=\"signup-button\">회원가입하기</button>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\"; // axios import 추가\r\n\r\naxios.defaults.baseURL = 'http://localhost:8081'; // Spring Boot 서버 주소\r\n\r\nexport default {\r\n  name: \"SignupView\",\r\n  data() {\r\n    return {\r\n      email: \"\",\r\n      verificationCode: \"\",\r\n      password: \"\",\r\n      passwordConfirm: \"\",\r\n      passwordVisible: false,\r\n      passwordConfirmVisible: false,\r\n      realname: \"\",\r\n      nickname: \"\",\r\n      birthdate: \"\",\r\n      gender: \"\",\r\n      selectedGenre1: \"\",\r\n      selectedGenre2: \"\",\r\n      selectedGenre3: \"\",\r\n\r\n      allGenres: [\r\n      \"판타지\", \r\n      \"과학 소설\", \r\n      \"미스터리\", \r\n      ],\r\n      \r\n      emailErrorMessage: \"\",\r\n      verificationErrorMessage: \"\",\r\n      isVerificationCodeSent: false,\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    isPasswordMismatch() {\r\n      return this.passwordConfirm && this.password !== this.passwordConfirm;\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    goBack() {\r\n      this.$router.push(\"/login\");\r\n    },\r\n    \r\n    async checkEmailDuplicate() {\r\n    try {\r\n        const response = await axios.get(`/api/user/check-email?email=${encodeURIComponent(this.email)}`);\r\n        if (response.data.success) {\r\n            this.emailErrorMessage = \"사용 가능한 이메일입니다.\";\r\n        } else {\r\n            /* this.emailErrorMessage = response.data.message; // ApiResponse에서 메시지 가져오기 */\r\n            this.emailErrorMessage = \"중복된 이메일입니다.\";\r\n        }\r\n    } catch (error) {\r\n        console.error(\"이메일 중복 확인 오류:\", error);\r\n    }\r\n},\r\n\r\n    async sendVerificationCode() {\r\n      if (!this.email) {\r\n        alert(\"이메일을 입력해주세요.\");\r\n        return;\r\n      }\r\n      try {\r\n        const response = await axios.post(\"/api/email/send-verification\", { email: this.email });\r\n        if (response.data.isSuccess) {\r\n          alert(\"인증번호가 이메일로 전송되었습니다.\");\r\n          this.isVerificationCodeSent = true;\r\n        } else {\r\n          alert(\"인증번호 전송에 실패했습니다.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"인증번호 전송 오류:\", error);\r\n      }\r\n    },\r\n\r\n   async verifyCode() {\r\n    if (!this.verificationCode) {\r\n        alert(\"인증번호를 입력해주세요.\");\r\n        return;\r\n    }\r\n    try {\r\n        const response = await axios.get(`/api/email/verify-code?inputCode=${this.verificationCode}`);\r\n        if (response.data.isSuccess) {\r\n            alert(\"인증번호가 확인되었습니다.\");\r\n            // 이후 회원가입 진행 또는 다음 단계로 이동\r\n        } else {\r\n            alert(\"인증번호 확인에 실패했습니다: \" + response.data.message);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"인증번호 검증 오류:\", error);\r\n    }\r\n  },\r\n\r\n  async checkNicknameDuplicate() {\r\n    try {\r\n      const response = await axios.get(`/api/user/check-nickname?nickname=${encodeURIComponent(this.nickname)}`);\r\n      if (response.data.success) {\r\n        this.nicknameErrorMessage = \"사용 가능한 닉네임입니다.\";\r\n      } else {\r\n        this.nicknameErrorMessage = \"중복된 닉네임입니다.\"; // API 메시지 사용\r\n      }\r\n    } catch (error) {\r\n      console.error(\"닉네임 중복 확인 오류:\", error);\r\n    }\r\n  },\r\n\r\n  async handleSignup() {\r\n  // 입력값 유효성 검증\r\n  if (!this.email) {\r\n    alert(\"이메일을 입력해주세요.\");\r\n    return;\r\n  }\r\n\r\n  if (this.emailErrorMessage !== \"사용 가능한 이메일입니다.\") {\r\n    alert(\"이메일 중복 확인을 해주세요.\");\r\n    return;\r\n  }\r\n\r\n  if (!this.isVerificationCodeSent || !this.verificationCode) {\r\n    alert(\"인증번호를 입력하고 인증을 완료해주세요.\");\r\n    return;\r\n  }\r\n\r\n  if (!this.password || !this.passwordConfirm) {\r\n    alert(\"비밀번호를 입력해주세요.\");\r\n    return;\r\n  }\r\n\r\n  if (this.password !== this.passwordConfirm) {\r\n    alert(\"비밀번호가 일치하지 않습니다.\");\r\n    return;\r\n  }\r\n\r\n  if (!this.realname) {\r\n    alert(\"이름을 입력해주세요.\");\r\n    return;\r\n  }\r\n\r\n  if (!this.nickname) {\r\n    alert(\"닉네임을 입력해주세요.\");\r\n    return;\r\n  }\r\n\r\n  if (this.nicknameErrorMessage !== \"사용 가능한 닉네임입니다.\") {\r\n    alert(\"닉네임 중복 확인을 해주세요.\");\r\n    return;\r\n  }\r\n\r\n  if (!this.birthdate) {\r\n    alert(\"생년월일을 입력해주세요.\");\r\n    return;\r\n  }\r\n\r\n  if (!this.gender) {\r\n    alert(\"성별을 선택해주세요.\");\r\n    return;\r\n  }\r\n\r\n  if (!this.selectedGenre1) {\r\n    alert(\"최소 한 개의 장르를 선택해주세요.\");\r\n    return;\r\n  }\r\n\r\n  // 회원가입 요청 데이터\r\n  const signupData = {\r\n    email: this.email,\r\n    password: this.password,\r\n    passwordConfirm: this.passwordConfirm,\r\n    realname: this.realname,\r\n    nickname: this.nickname,\r\n    birthDate: this.birthdate,\r\n    gender: this.gender,\r\n    genre: [this.selectedGenre1, this.selectedGenre2, this.selectedGenre3],\r\n  };\r\n\r\n  try {\r\n    const response = await axios.post(\"/api/user/register\", signupData);\r\n    if (response.data.success) {\r\n      alert(\"회원가입 성공!\");\r\n      this.$router.push(\"/login\"); // 성공 시 로그인 페이지로 이동\r\n    } else {\r\n      alert(\"회원가입 실패: \" + response.data.message);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"회원가입 오류:\", error.response ? error.response.data : error.message);\r\n    alert(\"회원가입 오류: \" + (error.response ? error.response.data.message : \"알 수 없는 오류입니다.\"));\r\n  }\r\n},\r\n\r\n\r\n    togglePasswordVisibility(field) {\r\n      if (field === \"password\") {\r\n        this.passwordVisible = !this.passwordVisible;\r\n      } else if (field === \"passwordConfirm\") {\r\n        this.passwordConfirmVisible = !this.passwordConfirmVisible;\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n  \r\n<style scoped>\r\n.form-container {\r\n  max-width: 400px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 20px;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  font-weight: bold;\r\n}\r\n\r\n.email-input-wrapper {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px; /* 입력란과 버튼 사이의 간격 */\r\n}\r\n\r\n.email-input-wrapper input {\r\n  flex: 1; /* 입력란이 가로로 확장되도록 설정 */\r\n}\r\n\r\n.email-input-wrapper button {\r\n  padding: 8px 12px;\r\n  font-size: 14px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  background-color: #28a745;\r\n  color: #fff;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.email-input-wrapper button:hover {\r\n  background-color: #218838;\r\n}\r\n\r\n/* 비밀번호 스타일 추가 */\r\n.password-input-wrapper {\r\n  display: flex;\r\n  align-items: center;\r\n  position: relative;\r\n}\r\n\r\n.password-input-wrapper input {\r\n  flex: 1;\r\n}\r\n\r\n.toggle-visibility {\r\n  cursor: pointer;\r\n  padding: 0 10px;\r\n  font-size: 18px;\r\n  color: #666;\r\n  user-select: none;\r\n}\r\n\r\ninput,\r\nselect {\r\n  width: 100%;\r\n  padding: 10px;\r\n  font-size: 14px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  box-sizing: border-box;\r\n}\r\n\r\n/* 성별 체크박스 */\r\n.gender {\r\n  display: flex;\r\n  justify-content: space-around;\r\n}\r\n\r\n.gender label {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 7px; /* 텍스트와 체크박스 간격 */\r\n}\r\n\r\n.signup-button {\r\n  width: 100%;\r\n  padding: 8px; /* 버튼 크기 줄이기 */\r\n  font-size: 14px; /* 폰트 크기 줄이기 */\r\n  color: #fff;\r\n  background: #28a745;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.signup-button:hover {\r\n  background: #218838;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}